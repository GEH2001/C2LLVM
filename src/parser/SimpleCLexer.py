# Generated from SimpleC.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,344,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
        33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,5,40,250,8,40,10,40,12,
        40,253,9,40,1,41,4,41,256,8,41,11,41,12,41,257,1,41,1,41,3,41,262,
        8,41,1,42,4,42,265,8,42,11,42,12,42,266,1,43,4,43,270,8,43,11,43,
        12,43,271,1,43,1,43,4,43,276,8,43,11,43,12,43,277,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,293,8,45,
        1,46,1,46,5,46,297,8,46,10,46,12,46,300,9,46,1,46,1,46,1,47,4,47,
        305,8,47,11,47,12,47,306,1,47,1,47,1,48,1,48,3,48,313,8,48,1,48,
        3,48,316,8,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,324,8,49,10,49,
        12,49,327,9,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,5,50,
        338,8,50,10,50,12,50,341,9,50,1,50,1,50,2,298,325,0,51,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,10,
        13,13,356,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,112,1,0,0,0,5,114,1,0,0,0,7,
        116,1,0,0,0,9,118,1,0,0,0,11,120,1,0,0,0,13,122,1,0,0,0,15,124,1,
        0,0,0,17,126,1,0,0,0,19,128,1,0,0,0,21,130,1,0,0,0,23,132,1,0,0,
        0,25,134,1,0,0,0,27,139,1,0,0,0,29,142,1,0,0,0,31,147,1,0,0,0,33,
        153,1,0,0,0,35,157,1,0,0,0,37,164,1,0,0,0,39,166,1,0,0,0,41,168,
        1,0,0,0,43,170,1,0,0,0,45,172,1,0,0,0,47,174,1,0,0,0,49,176,1,0,
        0,0,51,179,1,0,0,0,53,182,1,0,0,0,55,185,1,0,0,0,57,188,1,0,0,0,
        59,191,1,0,0,0,61,194,1,0,0,0,63,201,1,0,0,0,65,208,1,0,0,0,67,214,
        1,0,0,0,69,216,1,0,0,0,71,221,1,0,0,0,73,226,1,0,0,0,75,230,1,0,
        0,0,77,235,1,0,0,0,79,242,1,0,0,0,81,247,1,0,0,0,83,255,1,0,0,0,
        85,264,1,0,0,0,87,269,1,0,0,0,89,279,1,0,0,0,91,292,1,0,0,0,93,294,
        1,0,0,0,95,304,1,0,0,0,97,315,1,0,0,0,99,319,1,0,0,0,101,333,1,0,
        0,0,103,104,5,35,0,0,104,105,5,105,0,0,105,106,5,110,0,0,106,107,
        5,99,0,0,107,108,5,108,0,0,108,109,5,117,0,0,109,110,5,100,0,0,110,
        111,5,101,0,0,111,2,1,0,0,0,112,113,5,60,0,0,113,4,1,0,0,0,114,115,
        5,62,0,0,115,6,1,0,0,0,116,117,5,61,0,0,117,8,1,0,0,0,118,119,5,
        44,0,0,119,10,1,0,0,0,120,121,5,59,0,0,121,12,1,0,0,0,122,123,5,
        91,0,0,123,14,1,0,0,0,124,125,5,93,0,0,125,16,1,0,0,0,126,127,5,
        40,0,0,127,18,1,0,0,0,128,129,5,41,0,0,129,20,1,0,0,0,130,131,5,
        123,0,0,131,22,1,0,0,0,132,133,5,125,0,0,133,24,1,0,0,0,134,135,
        5,118,0,0,135,136,5,111,0,0,136,137,5,105,0,0,137,138,5,100,0,0,
        138,26,1,0,0,0,139,140,5,105,0,0,140,141,5,102,0,0,141,28,1,0,0,
        0,142,143,5,101,0,0,143,144,5,108,0,0,144,145,5,115,0,0,145,146,
        5,101,0,0,146,30,1,0,0,0,147,148,5,119,0,0,148,149,5,104,0,0,149,
        150,5,105,0,0,150,151,5,108,0,0,151,152,5,101,0,0,152,32,1,0,0,0,
        153,154,5,102,0,0,154,155,5,111,0,0,155,156,5,114,0,0,156,34,1,0,
        0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,116,0,0,160,161,
        5,117,0,0,161,162,5,114,0,0,162,163,5,110,0,0,163,36,1,0,0,0,164,
        165,5,33,0,0,165,38,1,0,0,0,166,167,5,42,0,0,167,40,1,0,0,0,168,
        169,5,47,0,0,169,42,1,0,0,0,170,171,5,37,0,0,171,44,1,0,0,0,172,
        173,5,43,0,0,173,46,1,0,0,0,174,175,5,45,0,0,175,48,1,0,0,0,176,
        177,5,62,0,0,177,178,5,61,0,0,178,50,1,0,0,0,179,180,5,60,0,0,180,
        181,5,61,0,0,181,52,1,0,0,0,182,183,5,61,0,0,183,184,5,61,0,0,184,
        54,1,0,0,0,185,186,5,33,0,0,186,187,5,61,0,0,187,56,1,0,0,0,188,
        189,5,38,0,0,189,190,5,38,0,0,190,58,1,0,0,0,191,192,5,124,0,0,192,
        193,5,124,0,0,193,60,1,0,0,0,194,195,5,115,0,0,195,196,5,116,0,0,
        196,197,5,114,0,0,197,198,5,108,0,0,198,199,5,101,0,0,199,200,5,
        110,0,0,200,62,1,0,0,0,201,202,5,112,0,0,202,203,5,114,0,0,203,204,
        5,105,0,0,204,205,5,110,0,0,205,206,5,116,0,0,206,207,5,102,0,0,
        207,64,1,0,0,0,208,209,5,115,0,0,209,210,5,99,0,0,210,211,5,97,0,
        0,211,212,5,110,0,0,212,213,5,102,0,0,213,66,1,0,0,0,214,215,5,38,
        0,0,215,68,1,0,0,0,216,217,5,97,0,0,217,218,5,116,0,0,218,219,5,
        111,0,0,219,220,5,105,0,0,220,70,1,0,0,0,221,222,5,103,0,0,222,223,
        5,101,0,0,223,224,5,116,0,0,224,225,5,115,0,0,225,72,1,0,0,0,226,
        227,5,105,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,74,1,0,0,0,
        230,231,5,98,0,0,231,232,5,111,0,0,232,233,5,111,0,0,233,234,5,108,
        0,0,234,76,1,0,0,0,235,236,5,100,0,0,236,237,5,111,0,0,237,238,5,
        117,0,0,238,239,5,98,0,0,239,240,5,108,0,0,240,241,5,101,0,0,241,
        78,1,0,0,0,242,243,5,99,0,0,243,244,5,104,0,0,244,245,5,97,0,0,245,
        246,5,114,0,0,246,80,1,0,0,0,247,251,7,0,0,0,248,250,7,1,0,0,249,
        248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,
        82,1,0,0,0,253,251,1,0,0,0,254,256,7,2,0,0,255,254,1,0,0,0,256,257,
        1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,261,1,0,0,0,259,260,
        5,46,0,0,260,262,5,104,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,84,
        1,0,0,0,263,265,7,3,0,0,264,263,1,0,0,0,265,266,1,0,0,0,266,264,
        1,0,0,0,266,267,1,0,0,0,267,86,1,0,0,0,268,270,7,3,0,0,269,268,1,
        0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,273,1,
        0,0,0,273,275,5,46,0,0,274,276,7,3,0,0,275,274,1,0,0,0,276,277,1,
        0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,88,1,0,0,0,279,280,5,39,
        0,0,280,281,9,0,0,0,281,282,5,39,0,0,282,90,1,0,0,0,283,284,5,116,
        0,0,284,285,5,114,0,0,285,286,5,117,0,0,286,293,5,101,0,0,287,288,
        5,102,0,0,288,289,5,97,0,0,289,290,5,108,0,0,290,291,5,115,0,0,291,
        293,5,101,0,0,292,283,1,0,0,0,292,287,1,0,0,0,293,92,1,0,0,0,294,
        298,5,34,0,0,295,297,9,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,
        299,1,0,0,0,298,296,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,
        302,5,34,0,0,302,94,1,0,0,0,303,305,7,4,0,0,304,303,1,0,0,0,305,
        306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,
        309,6,47,0,0,309,96,1,0,0,0,310,312,5,13,0,0,311,313,5,10,0,0,312,
        311,1,0,0,0,312,313,1,0,0,0,313,316,1,0,0,0,314,316,5,10,0,0,315,
        310,1,0,0,0,315,314,1,0,0,0,316,317,1,0,0,0,317,318,6,48,0,0,318,
        98,1,0,0,0,319,320,5,47,0,0,320,321,5,42,0,0,321,325,1,0,0,0,322,
        324,9,0,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,326,1,0,0,0,325,
        323,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,42,0,0,329,
        330,5,47,0,0,330,331,1,0,0,0,331,332,6,49,0,0,332,100,1,0,0,0,333,
        334,5,47,0,0,334,335,5,47,0,0,335,339,1,0,0,0,336,338,8,5,0,0,337,
        336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
        342,1,0,0,0,341,339,1,0,0,0,342,343,6,50,0,0,343,102,1,0,0,0,14,
        0,251,257,261,266,271,277,292,298,306,312,315,325,339,1,6,0,0
    ]

class SimpleCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    Identifier = 41
    Lib = 42
    Integer = 43
    Double = 44
    Char = 45
    Bool = 46
    String = 47
    Whitespace = 48
    Newline = 49
    BlockComment = 50
    LineComment = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'='", "','", "';'", "'['", "']'", 
            "'('", "')'", "'{'", "'}'", "'void'", "'if'", "'else'", "'while'", 
            "'for'", "'return'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", 
            "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'strlen'", 
            "'printf'", "'scanf'", "'&'", "'atoi'", "'gets'", "'int'", "'bool'", 
            "'double'", "'char'" ]

    symbolicNames = [ "<INVALID>",
            "Identifier", "Lib", "Integer", "Double", "Char", "Bool", "String", 
            "Whitespace", "Newline", "BlockComment", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "Identifier", "Lib", "Integer", "Double", 
                  "Char", "Bool", "String", "Whitespace", "Newline", "BlockComment", 
                  "LineComment" ]

    grammarFileName = "SimpleC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


